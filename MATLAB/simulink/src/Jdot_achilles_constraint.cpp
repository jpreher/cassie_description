/*
 * Automatically Generated from Mathematica.
 * Wed 21 Aug 2019 14:42:09 GMT-07:00
 */

#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t752;
  double t309;
  double t424;
  double t762;
  double t972;
  double t1133;
  double t1688;
  double t1942;
  double t2190;
  double t727;
  double t770;
  double t887;
  double t3840;
  double t4206;
  double t4234;
  double t4320;
  double t4372;
  double t4389;
  double t4503;
  double t4430;
  double t4447;
  double t4480;
  double t4504;
  double t4825;
  double t4502;
  double t5036;
  double t5100;
  double t5101;
  double t1289;
  double t5120;
  double t5121;
  double t4295;
  double t4303;
  double t5126;
  double t5127;
  double t5128;
  double t4507;
  double t5144;
  double t5145;
  double t4553;
  double t4568;
  double t4575;
  double t5155;
  double t5156;
  double t4589;
  double t4591;
  double t4595;
  double t4686;
  double t4691;
  double t4911;
  double t4913;
  double t4918;
  double t4926;
  double t4934;
  double t4935;
  double t4951;
  double t4980;
  double t4988;
  double t4996;
  double t5017;
  double t5026;
  double t5030;
  double t5043;
  double t5047;
  double t5064;
  double t5080;
  double t5081;
  double t5084;
  double t1078;
  double t1546;
  double t1660;
  double t2674;
  double t3523;
  double t3575;
  double t3811;
  double t4427;
  double t4537;
  double t4543;
  double t4545;
  double t4581;
  double t4606;
  double t4617;
  double t4680;
  double t4952;
  double t5069;
  double t5082;
  double t5088;
  double t5094;
  double t5095;
  double t5096;
  double t5102;
  double t5105;
  double t5111;
  double t5116;
  double t5117;
  double t5118;
  double t5122;
  double t5123;
  double t5135;
  double t5138;
  double t5141;
  double t5212;
  double t5216;
  double t5219;
  double t5223;
  double t5224;
  double t5227;
  double t5233;
  double t5235;
  double t5236;
  double t5283;
  double t5284;
  double t5319;
  double t5320;
  double t5203;
  double t5205;
  double t5273;
  double t5274;
  double t5278;
  double t5280;
  double t5281;
  double t5282;
  double t5285;
  double t5287;
  double t5292;
  double t5294;
  double t5295;
  double t5296;
  double t5297;
  double t5300;
  double t5301;
  double t5305;
  double t5306;
  double t5309;
  double t5310;
  double t5419;
  double t5424;
  double t5426;
  double t5125;
  double t5143;
  double t5154;
  double t5169;
  double t5173;
  double t5178;
  double t5179;
  double t5181;
  double t5182;
  double t5186;
  double t5188;
  double t5189;
  double t5190;
  double t5192;
  double t5193;
  double t5195;
  double t5097;
  double t5098;
  double t5115;
  double t5119;
  double t5197;
  double t5507;
  double t5508;
  double t5509;
  double t5510;
  double t5516;
  double t5519;
  double t5523;
  double t5530;
  double t5206;
  double t5209;
  double t5210;
  double t5211;
  double t5220;
  double t5221;
  double t5231;
  double t5241;
  double t5245;
  double t5246;
  double t5249;
  double t5250;
  double t5251;
  double t5252;
  double t5254;
  double t5257;
  double t5261;
  double t5262;
  double t5263;
  double t5266;
  double t5267;
  double t5272;
  double t5311;
  double t5368;
  double t5379;
  double t5569;
  double t5576;
  double t5578;
  double t5560;
  double t5567;
  double t5575;
  double t5580;
  double t5584;
  double t5585;
  double t5590;
  double t5591;
  double t5595;
  double t5596;
  double t5597;
  double t5598;
  double t5601;
  double t5605;
  double t5608;
  double t5609;
  double t5668;
  double t5680;
  double t5667;
  double t5689;
  double t5642;
  double t5643;
  double t5644;
  double t5645;
  double t5646;
  double t5647;
  double t5648;
  double t5649;
  double t5651;
  double t5656;
  double t5659;
  double t5660;
  double t5662;
  double t5664;
  double t5669;
  double t5670;
  double t5671;
  double t5672;
  double t5673;
  double t5674;
  double t5676;
  double t5677;
  double t5679;
  double t5681;
  double t5682;
  double t5683;
  double t5687;
  double t5688;
  double t5690;
  double t5691;
  double t5692;
  double t5693;
  double t5694;
  double t5695;
  double t5696;
  double t5697;
  double t5701;
  double t5702;
  double t5705;
  double t5269;
  double t5540;
  double t5542;
  double t5549;
  double t5312;
  double t5315;
  double t5321;
  double t5326;
  double t5327;
  double t5329;
  double t5330;
  double t5334;
  double t5335;
  double t5337;
  double t5338;
  double t5344;
  double t5345;
  double t5346;
  double t5349;
  double t5352;
  double t5358;
  double t5385;
  double t5404;
  double t5430;
  double t5433;
  double t5440;
  double t5444;
  double t5451;
  double t5452;
  double t5453;
  double t5461;
  double t5463;
  double t5464;
  double t5468;
  double t5470;
  double t5481;
  double t5489;
  double t5499;
  double t5500;
  double t5538;
  double t5539;
  double t5550;
  double t5554;
  double t5555;
  double t5610;
  double t5611;
  double t5612;
  double t5772;
  double t5773;
  double t5775;
  double t5710;
  double t5711;
  double t5712;
  double t5714;
  double t5716;
  double t5718;
  double t5720;
  double t5721;
  double t5723;
  double t5725;
  double t5727;
  double t5728;
  double t5729;
  double t5730;
  double t5731;
  double t5732;
  double t5736;
  double t5737;
  double t5738;
  double t5740;
  double t5741;
  double t5742;
  double t5743;
  double t5744;
  double t5745;
  double t5747;
  double t5750;
  double t5751;
  double t5752;
  double t5753;
  double t5754;
  double t5755;
  double t5810;
  double t5801;
  double t5804;
  double t5808;
  double t5842;
  double t5760;
  double t5762;
  double t5763;
  double t5202;
  double t5363;
  double t5504;
  double t5870;
  double t5872;
  double t5874;
  double t5875;
  double t5876;
  double t5877;
  double t5878;
  double t5879;
  double t5880;
  double t5883;
  double t5888;
  double t5890;
  double t5891;
  double t5892;
  double t5894;
  double t5895;
  double t5898;
  double t5899;
  double t5900;
  double t5903;
  double t5904;
  double t5905;
  double t5907;
  double t5908;
  double t5909;
  double t5910;
  double t5912;
  double t5913;
  double t5914;
  double t5915;
  double t5916;
  double t5919;
  double t5920;
  double t5921;
  double t5922;
  double t5942;
  double t5931;
  double t5932;
  double t5940;
  double t5944;
  double t5945;
  double t5947;
  double t5948;
  double t5949;
  double t5950;
  double t5952;
  double t5953;
  double t5956;
  double t5957;
  double t5961;
  double t5962;
  double t5964;
  double t5965;
  double t5966;
  double t5968;
  double t5969;
  double t5976;
  double t5792;
  double t5794;
  double t5795;
  double t5708;
  double t5735;
  double t5756;
  double t6067;
  double t6059;
  double t6060;
  double t6068;
  double t6076;
  double t6080;
  double t6085;
  double t6086;
  double t6087;
  double t6061;
  double t6069;
  double t6071;
  double t6094;
  double t6096;
  double t6097;
  double t6100;
  double t6101;
  double t6102;
  double t6111;
  double t6112;
  double t6105;
  double t6106;
  double t6107;
  double t6120;
  double t6109;
  double t6166;
  double t6240;
  double t6264;
  double t6081;
  double t6286;
  double t6289;
  double t6098;
  double t6099;
  double t6294;
  double t6295;
  double t6297;
  double t6113;
  double t6359;
  double t6360;
  double t6117;
  double t6118;
  double t6121;
  double t6123;
  double t6124;
  double t6126;
  double t6127;
  double t6128;
  double t6129;
  double t6363;
  double t6364;
  double t6133;
  double t6134;
  double t6136;
  double t6146;
  double t6148;
  double t6149;
  double t6157;
  double t6158;
  double t6159;
  double t6162;
  double t6163;
  double t6165;
  double t6169;
  double t6216;
  double t6218;
  double t6220;
  double t6222;
  double t6226;
  double t6079;
  double t6083;
  double t6084;
  double t6088;
  double t6090;
  double t6091;
  double t6092;
  double t6103;
  double t6114;
  double t6115;
  double t6116;
  double t6131;
  double t6143;
  double t6151;
  double t6154;
  double t6155;
  double t6219;
  double t6225;
  double t6228;
  double t6229;
  double t6230;
  double t6233;
  double t6270;
  double t6271;
  double t6273;
  double t6279;
  double t6282;
  double t6283;
  double t6290;
  double t6291;
  double t6346;
  double t6349;
  double t6353;
  double t6420;
  double t6421;
  double t6423;
  double t6427;
  double t6428;
  double t6429;
  double t6431;
  double t6433;
  double t6434;
  double t6469;
  double t6470;
  double t6491;
  double t6492;
  double t6412;
  double t6413;
  double t6459;
  double t6461;
  double t6462;
  double t6463;
  double t6466;
  double t6467;
  double t6471;
  double t6473;
  double t6474;
  double t6475;
  double t6477;
  double t6478;
  double t6479;
  double t6480;
  double t6481;
  double t6482;
  double t6483;
  double t6484;
  double t6486;
  double t6527;
  double t6528;
  double t6529;
  double t6293;
  double t6356;
  double t6361;
  double t6365;
  double t6367;
  double t6392;
  double t6393;
  double t6394;
  double t6395;
  double t6396;
  double t6398;
  double t6401;
  double t6402;
  double t6404;
  double t6405;
  double t6406;
  double t6234;
  double t6237;
  double t6276;
  double t6285;
  double t6407;
  double t6559;
  double t6560;
  double t6561;
  double t6562;
  double t6563;
  double t6564;
  double t6565;
  double t6566;
  double t6415;
  double t6416;
  double t6417;
  double t6419;
  double t6424;
  double t6425;
  double t6430;
  double t6437;
  double t6438;
  double t6439;
  double t6440;
  double t6441;
  double t6443;
  double t6444;
  double t6445;
  double t6446;
  double t6448;
  double t6449;
  double t6451;
  double t6452;
  double t6453;
  double t6458;
  double t6488;
  double t6522;
  double t6523;
  double t6577;
  double t6579;
  double t6581;
  double t6575;
  double t6576;
  double t6578;
  double t6583;
  double t6584;
  double t6587;
  double t6588;
  double t6589;
  double t6590;
  double t6593;
  double t6594;
  double t6595;
  double t6597;
  double t6599;
  double t6601;
  double t6602;
  double t6648;
  double t6684;
  double t6646;
  double t6704;
  double t6630;
  double t6631;
  double t6632;
  double t6633;
  double t6634;
  double t6636;
  double t6638;
  double t6641;
  double t6642;
  double t6644;
  double t6649;
  double t6652;
  double t6653;
  double t6654;
  double t6656;
  double t6680;
  double t6681;
  double t6682;
  double t6683;
  double t6688;
  double t6689;
  double t6691;
  double t6693;
  double t6696;
  double t6698;
  double t6700;
  double t6701;
  double t6703;
  double t6705;
  double t6708;
  double t6709;
  double t6710;
  double t6711;
  double t6712;
  double t6713;
  double t6715;
  double t6717;
  double t6718;
  double t6720;
  double t6455;
  double t6569;
  double t6570;
  double t6571;
  double t6489;
  double t6490;
  double t6493;
  double t6495;
  double t6496;
  double t6497;
  double t6500;
  double t6504;
  double t6505;
  double t6508;
  double t6509;
  double t6510;
  double t6511;
  double t6513;
  double t6515;
  double t6516;
  double t6517;
  double t6525;
  double t6526;
  double t6530;
  double t6531;
  double t6532;
  double t6534;
  double t6536;
  double t6538;
  double t6539;
  double t6540;
  double t6542;
  double t6544;
  double t6547;
  double t6548;
  double t6550;
  double t6551;
  double t6552;
  double t6554;
  double t6567;
  double t6568;
  double t6572;
  double t6573;
  double t6574;
  double t6603;
  double t6605;
  double t6606;
  double t6781;
  double t6783;
  double t6784;
  double t6722;
  double t6723;
  double t6724;
  double t6725;
  double t6726;
  double t6727;
  double t6728;
  double t6729;
  double t6730;
  double t6734;
  double t6739;
  double t6740;
  double t6741;
  double t6742;
  double t6743;
  double t6745;
  double t6747;
  double t6748;
  double t6749;
  double t6750;
  double t6751;
  double t6753;
  double t6754;
  double t6755;
  double t6757;
  double t6758;
  double t6759;
  double t6760;
  double t6761;
  double t6762;
  double t6763;
  double t6764;
  double t6806;
  double t6802;
  double t6803;
  double t6804;
  double t6826;
  double t6769;
  double t6770;
  double t6772;
  double t6410;
  double t6518;
  double t6556;
  double t6848;
  double t6849;
  double t6850;
  double t6851;
  double t6852;
  double t6853;
  double t6854;
  double t6855;
  double t6856;
  double t6857;
  double t6858;
  double t6859;
  double t6860;
  double t6861;
  double t6863;
  double t6864;
  double t6865;
  double t6866;
  double t6867;
  double t6868;
  double t6869;
  double t6870;
  double t6871;
  double t6872;
  double t6873;
  double t6874;
  double t6875;
  double t6876;
  double t6877;
  double t6878;
  double t6879;
  double t6880;
  double t6881;
  double t6882;
  double t6883;
  double t6894;
  double t6888;
  double t6889;
  double t6893;
  double t6895;
  double t6896;
  double t6897;
  double t6898;
  double t6899;
  double t6900;
  double t6902;
  double t6903;
  double t6905;
  double t6906;
  double t6910;
  double t6911;
  double t6912;
  double t6913;
  double t6914;
  double t6915;
  double t6916;
  double t6919;
  double t6795;
  double t6796;
  double t6797;
  double t6721;
  double t6746;
  double t6765;
  t752 = Cos(var1[9]);
  t309 = Cos(var1[10]);
  t424 = Sin(var1[9]);
  t762 = Sin(var1[10]);
  t972 = Cos(var1[11]);
  t1133 = Sin(var1[11]);
  t1688 = t752*t309;
  t1942 = -1.*t424*t762;
  t2190 = t1688 + t1942;
  t727 = -1.*t309*t424;
  t770 = -1.*t752*t762;
  t887 = t727 + t770;
  t3840 = Cos(var1[12]);
  t4206 = -1.*t3840;
  t4234 = 1. + t4206;
  t4320 = -1.*t972*t2190;
  t4372 = -1.*t887*t1133;
  t4389 = t4320 + t4372;
  t4503 = Sin(var1[12]);
  t4430 = t972*t887;
  t4447 = -1.*t2190*t1133;
  t4480 = t4430 + t4447;
  t4504 = -0.996943*t4503;
  t4825 = -0.0004284921280000001*t4234;
  t4502 = 0.0004284921280000001*t4234;
  t5036 = 0.996943*t4503;
  t5100 = -1.*t309;
  t5101 = 1. + t5100;
  t1289 = -0.70544*t1133;
  t5120 = -1.*t972;
  t5121 = 1. + t5120;
  t4295 = -0.999969365345*t4234;
  t4303 = 1. + t4295;
  t5126 = -1.*t752*t309;
  t5127 = t424*t762;
  t5128 = t5126 + t5127;
  t4507 = t4502 + t4504;
  t5144 = t972*t5128;
  t5145 = t5144 + t4372;
  t4553 = 0.005481192614*t4234;
  t4568 = -0.077936*t4503;
  t4575 = t4553 + t4568;
  t5155 = t5128*t1133;
  t5156 = t4430 + t5155;
  t4589 = 0.07769774964800001*t4234;
  t4591 = 0.005498*t4503;
  t4595 = t4589 + t4591;
  t4686 = -1.2096424700126054e-9*var1[12];
  t4691 = -0.6934128581485427*t4234;
  t4911 = t4825 + t4504;
  t4913 = -0.021877537552*t4911;
  t4918 = -0.005481192614*t4234;
  t4926 = 0.077936*t4503;
  t4934 = t4918 + t4926;
  t4935 = 0.005534467322*t4934;
  t4951 = t4686 + t4691 + t4913 + t4935;
  t4980 = -1.7147089040178687e-8*var1[12];
  t4988 = -0.021744644052735636*t4234;
  t4996 = -0.07769774964800001*t4234;
  t5017 = -0.005498*t4503;
  t5026 = t4996 + t5017;
  t5030 = 0.005534467322*t5026;
  t5043 = t4825 + t5036;
  t5047 = -0.6934341012630001*t5043;
  t5064 = t4980 + t4988 + t5030 + t5047;
  t5080 = -0.993925573253*t4234;
  t5081 = 1. + t5080;
  t5084 = t4502 + t5036;
  t1078 = -0.01841*t972;
  t1546 = t1078 + t1289;
  t1660 = -1.*t887*t1546;
  t2674 = -0.70544*t972;
  t3523 = 0.01841*t1133;
  t3575 = t2674 + t3523;
  t3811 = -1.*t2190*t3575;
  t4427 = t4303*t4389;
  t4537 = t4480*t4507;
  t4543 = t4427 + t4537;
  t4545 = 0.588518*t4543;
  t4581 = t4389*t4575;
  t4606 = t4480*t4595;
  t4617 = t4581 + t4606;
  t4680 = -0.124503*t4617;
  t4952 = -1.*t4389*t4951;
  t5069 = -1.*t4480*t5064;
  t5082 = t5081*t4480;
  t5088 = t4389*t5084;
  t5094 = t5082 + t5088;
  t5095 = -0.045407*t5094;
  t5096 = t1660 + t3811 + t4545 + t4680 + t4952 + t5069 + t5095;
  t5102 = -0.00159*t5101;
  t5105 = -0.27068*t762;
  t5111 = t5102 + t5105;
  t5116 = -0.27068*t5101;
  t5117 = 0.00159*t762;
  t5118 = t5116 + t5117;
  t5122 = 0.01841*t5121;
  t5123 = t5122 + t1289;
  t5135 = -0.70544*t5121;
  t5138 = -0.01841*t1133;
  t5141 = t5135 + t5138;
  t5212 = t309*t424;
  t5216 = t752*t762;
  t5219 = t5212 + t5216;
  t5223 = t972*t2190;
  t5224 = -1.*t5219*t1133;
  t5227 = t5223 + t5224;
  t5233 = t972*t5219;
  t5235 = t2190*t1133;
  t5236 = t5233 + t5235;
  t5283 = t887*t1133;
  t5284 = t5223 + t5283;
  t5319 = -1.*t972*t5219;
  t5320 = t5319 + t4447;
  t5203 = -1.*t752;
  t5205 = 1. + t5203;
  t5273 = 0.21*t424;
  t5274 = -1.*t752*t5111;
  t5278 = t424*t5118;
  t5280 = -1.*t2190*t5123;
  t5281 = -1.*t887*t5141;
  t5282 = t4303*t4480;
  t5285 = t5284*t4507;
  t5287 = t5282 + t5285;
  t5292 = 0.588518*t5287;
  t5294 = t4480*t4575;
  t5295 = t5284*t4595;
  t5296 = t5294 + t5295;
  t5297 = -0.124503*t5296;
  t5300 = -1.*t4480*t4951;
  t5301 = -1.*t5284*t5064;
  t5305 = t5081*t5284;
  t5306 = t4480*t5084;
  t5309 = t5305 + t5306;
  t5310 = -0.045407*t5309;
  t5419 = -1.*t972*t887;
  t5424 = -1.*t5128*t1133;
  t5426 = t5419 + t5424;
  t5125 = -1.*t887*t5123;
  t5143 = -1.*t5128*t5141;
  t5154 = t4303*t5145;
  t5169 = t5156*t4507;
  t5173 = t5154 + t5169;
  t5178 = 0.588518*t5173;
  t5179 = t5145*t4575;
  t5181 = t5156*t4595;
  t5182 = t5179 + t5181;
  t5186 = -0.124503*t5182;
  t5188 = -1.*t5145*t4951;
  t5189 = -1.*t5156*t5064;
  t5190 = t5081*t5156;
  t5192 = t5145*t5084;
  t5193 = t5190 + t5192;
  t5195 = -0.045407*t5193;
  t5097 = 0.21*t752;
  t5098 = 0.049*t424;
  t5115 = t424*t5111;
  t5119 = t752*t5118;
  t5197 = t5097 + t5098 + t5115 + t5119 + t5125 + t5143 + t5178 + t5186 + t5188 + t5189 + t5195;
  t5507 = 0.00159*t309;
  t5508 = t5507 + t5105;
  t5509 = t424*t5508;
  t5510 = -0.27068*t309;
  t5516 = -0.00159*t762;
  t5519 = t5510 + t5516;
  t5523 = -1.*t752*t5519;
  t5530 = t5509 + t5523 + t5125 + t5143 + t5178 + t5186 + t5188 + t5189 + t5195;
  t5206 = 0.21*t5205;
  t5209 = -0.049*t424;
  t5210 = -1.*t424*t5111;
  t5211 = -1.*t752*t5118;
  t5220 = -1.*t5219*t5123;
  t5221 = -1.*t2190*t5141;
  t5231 = t4303*t5227;
  t5241 = t5236*t4507;
  t5245 = t5231 + t5241;
  t5246 = 0.588518*t5245;
  t5249 = t5227*t4575;
  t5250 = t5236*t4595;
  t5251 = t5249 + t5250;
  t5252 = -0.124503*t5251;
  t5254 = -1.*t5227*t4951;
  t5257 = -1.*t5236*t5064;
  t5261 = t5081*t5236;
  t5262 = t5227*t5084;
  t5263 = t5261 + t5262;
  t5266 = -0.045407*t5263;
  t5267 = -0.09 + t5206 + t5209 + t5210 + t5211 + t5220 + t5221 + t5246 + t5252 + t5254 + t5257 + t5266;
  t5272 = -0.049*t752;
  t5311 = t5272 + t5273 + t5274 + t5278 + t5280 + t5281 + t5292 + t5297 + t5300 + t5301 + t5310;
  t5368 = 0.049*t5205;
  t5379 = -0.049 + t5368 + t5273 + t5274 + t5278 + t5280 + t5281 + t5292 + t5297 + t5300 + t5301 + t5310;
  t5569 = t5233 + t5424;
  t5576 = t5219*t1133;
  t5578 = t5144 + t5576;
  t5560 = -1.*t5128*t5123;
  t5567 = -1.*t5219*t5141;
  t5575 = t4303*t5569;
  t5580 = t5578*t4507;
  t5584 = t5575 + t5580;
  t5585 = 0.588518*t5584;
  t5590 = t5569*t4575;
  t5591 = t5578*t4595;
  t5595 = t5590 + t5591;
  t5596 = -0.124503*t5595;
  t5597 = -1.*t5569*t4951;
  t5598 = -1.*t5578*t5064;
  t5601 = t5081*t5578;
  t5605 = t5569*t5084;
  t5608 = t5601 + t5605;
  t5609 = -0.045407*t5608;
  t5668 = -0.0004284921280000001*t4503;
  t5680 = 0.996943*t3840;
  t5667 = -0.996943*t3840;
  t5689 = 0.0004284921280000001*t4503;
  t5642 = -0.077936*t3840;
  t5643 = 0.005481192614*t4503;
  t5644 = t5642 + t5643;
  t5645 = t4480*t5644;
  t5646 = 0.005498*t3840;
  t5647 = 0.07769774964800001*t4503;
  t5648 = t5646 + t5647;
  t5649 = t5284*t5648;
  t5651 = t5645 + t5649;
  t5656 = -0.124503*t5651;
  t5659 = 0.077936*t3840;
  t5660 = -0.005481192614*t4503;
  t5662 = t5659 + t5660;
  t5664 = 0.005534467322*t5662;
  t5669 = t5667 + t5668;
  t5670 = -0.021877537552*t5669;
  t5671 = -0.6934128581485427*t4503;
  t5672 = -1.2096424700126054e-9 + t5664 + t5670 + t5671;
  t5673 = -1.*t4480*t5672;
  t5674 = -0.005498*t3840;
  t5676 = -0.07769774964800001*t4503;
  t5677 = t5674 + t5676;
  t5679 = 0.005534467322*t5677;
  t5681 = t5680 + t5668;
  t5682 = -0.6934341012630001*t5681;
  t5683 = -0.021744644052735636*t4503;
  t5687 = -1.7147089040178687e-8 + t5679 + t5682 + t5683;
  t5688 = -1.*t5284*t5687;
  t5690 = t5680 + t5689;
  t5691 = t4480*t5690;
  t5692 = -0.993925573253*t5284*t4503;
  t5693 = t5691 + t5692;
  t5694 = -0.045407*t5693;
  t5695 = t5667 + t5689;
  t5696 = t5284*t5695;
  t5697 = -0.999969365345*t4480*t4503;
  t5701 = t5696 + t5697;
  t5702 = 0.588518*t5701;
  t5705 = t5656 + t5673 + t5688 + t5694 + t5702;
  t5269 = 2.*t5096*t5267;
  t5540 = -1.*t752*t5508;
  t5542 = -1.*t424*t5519;
  t5549 = t5540 + t5542 + t5280 + t5281 + t5292 + t5297 + t5300 + t5301 + t5310;
  t5312 = -1.*t2190*t1546;
  t5315 = -1.*t5219*t3575;
  t5321 = t4303*t5320;
  t5326 = t5227*t4507;
  t5327 = t5321 + t5326;
  t5329 = 0.588518*t5327;
  t5330 = t5320*t4575;
  t5334 = t5227*t4595;
  t5335 = t5330 + t5334;
  t5337 = -0.124503*t5335;
  t5338 = -1.*t5320*t4951;
  t5344 = -1.*t5227*t5064;
  t5345 = t5081*t5227;
  t5346 = t5320*t5084;
  t5349 = t5345 + t5346;
  t5352 = -0.045407*t5349;
  t5358 = t5312 + t5315 + t5329 + t5337 + t5338 + t5344 + t5352;
  t5385 = -1.*t5128*t1546;
  t5404 = -1.*t887*t3575;
  t5430 = t4303*t5426;
  t5433 = t5145*t4507;
  t5440 = t5430 + t5433;
  t5444 = 0.588518*t5440;
  t5451 = t5426*t4575;
  t5452 = t5145*t4595;
  t5453 = t5451 + t5452;
  t5461 = -0.124503*t5453;
  t5463 = -1.*t5426*t4951;
  t5464 = -1.*t5145*t5064;
  t5468 = t5081*t5145;
  t5470 = t5426*t5084;
  t5481 = t5468 + t5470;
  t5489 = -0.045407*t5481;
  t5499 = t5385 + t5404 + t5444 + t5461 + t5463 + t5464 + t5489;
  t5500 = 2.*t5379*t5499;
  t5538 = 2.*t5530*t5197;
  t5539 = 2.*t5530*t5267;
  t5550 = 2.*t5549*t5311;
  t5554 = t752*t5508;
  t5555 = t424*t5519;
  t5610 = t5554 + t5555 + t5560 + t5567 + t5585 + t5596 + t5597 + t5598 + t5609;
  t5611 = 2.*t5379*t5610;
  t5612 = t5538 + t5539 + t5550 + t5611;
  t5772 = -0.00159*t309;
  t5773 = 0.27068*t762;
  t5775 = t5772 + t5773;
  t5710 = 2.*t5267*t5705;
  t5711 = t5227*t5644;
  t5712 = t5236*t5648;
  t5714 = t5711 + t5712;
  t5716 = -0.124503*t5714;
  t5718 = -1.*t5227*t5672;
  t5720 = -1.*t5236*t5687;
  t5721 = t5236*t5695;
  t5723 = -0.999969365345*t5227*t4503;
  t5725 = t5721 + t5723;
  t5727 = 0.588518*t5725;
  t5728 = t5227*t5690;
  t5729 = -0.993925573253*t5236*t4503;
  t5730 = t5728 + t5729;
  t5731 = -0.045407*t5730;
  t5732 = t5716 + t5718 + t5720 + t5727 + t5731;
  t5736 = t5145*t5644;
  t5737 = t5156*t5648;
  t5738 = t5736 + t5737;
  t5740 = -0.124503*t5738;
  t5741 = -1.*t5145*t5672;
  t5742 = -1.*t5156*t5687;
  t5743 = t5156*t5695;
  t5744 = -0.999969365345*t5145*t4503;
  t5745 = t5743 + t5744;
  t5747 = 0.588518*t5745;
  t5750 = t5145*t5690;
  t5751 = -0.993925573253*t5156*t4503;
  t5752 = t5750 + t5751;
  t5753 = -0.045407*t5752;
  t5754 = t5740 + t5741 + t5742 + t5747 + t5753;
  t5755 = 2.*t5379*t5754;
  t5810 = t4320 + t5576;
  t5801 = 0.01841*t972;
  t5804 = 0.70544*t1133;
  t5808 = t5801 + t5804;
  t5842 = t5419 + t5235;
  t5760 = 2.*t5096*t5530;
  t5762 = 2.*t5549*t5358;
  t5763 = t5760 + t5269 + t5762 + t5500;
  t5202 = 2.*t5096*t5197;
  t5363 = 2.*t5311*t5358;
  t5504 = t5202 + t5269 + t5363 + t5500;
  t5870 = 2.*t5096*t5705;
  t5872 = t4389*t5644;
  t5874 = t4480*t5648;
  t5875 = t5872 + t5874;
  t5876 = -0.124503*t5875;
  t5877 = -1.*t4389*t5672;
  t5878 = -1.*t4480*t5687;
  t5879 = t4480*t5695;
  t5880 = -0.999969365345*t4389*t4503;
  t5883 = t5879 + t5880;
  t5888 = 0.588518*t5883;
  t5890 = t4389*t5690;
  t5891 = -0.993925573253*t4480*t4503;
  t5892 = t5890 + t5891;
  t5894 = -0.045407*t5892;
  t5895 = t5876 + t5877 + t5878 + t5888 + t5894;
  t5898 = 2.*t5379*t5895;
  t5899 = t5320*t5644;
  t5900 = t5227*t5648;
  t5903 = t5899 + t5900;
  t5904 = -0.124503*t5903;
  t5905 = -1.*t5320*t5672;
  t5907 = -1.*t5227*t5687;
  t5908 = t5320*t5690;
  t5909 = -0.993925573253*t5227*t4503;
  t5910 = t5908 + t5909;
  t5912 = -0.045407*t5910;
  t5913 = t5227*t5695;
  t5914 = -0.999969365345*t5320*t4503;
  t5915 = t5913 + t5914;
  t5916 = 0.588518*t5915;
  t5919 = t5904 + t5905 + t5907 + t5912 + t5916;
  t5920 = 2.*t5267*t5919;
  t5921 = 2.*t5358*t5732;
  t5922 = t5870 + t5898 + t5920 + t5921;
  t5942 = -0.0004284921280000001*t3840;
  t5931 = 0.0004284921280000001*t3840;
  t5932 = t5931 + t4504;
  t5940 = -0.021744644052735636*t3840;
  t5944 = t5942 + t4504;
  t5945 = -0.6934341012630001*t5944;
  t5947 = -0.07769774964800001*t3840;
  t5948 = t5947 + t4591;
  t5949 = 0.005534467322*t5948;
  t5950 = t5940 + t5945 + t5949;
  t5952 = 0.07769774964800001*t3840;
  t5953 = t5952 + t5017;
  t5956 = 0.005481192614*t3840;
  t5957 = t5956 + t4926;
  t5961 = -0.6934128581485427*t3840;
  t5962 = -0.005481192614*t3840;
  t5964 = t5962 + t4568;
  t5965 = 0.005534467322*t5964;
  t5966 = t5942 + t5036;
  t5968 = -0.021877537552*t5966;
  t5969 = t5961 + t5965 + t5968;
  t5976 = t5931 + t5036;
  t5792 = 2.*t5530*t5705;
  t5794 = 2.*t5549*t5732;
  t5795 = t5792 + t5710 + t5794 + t5755;
  t5708 = 2.*t5197*t5705;
  t5735 = 2.*t5311*t5732;
  t5756 = t5708 + t5710 + t5735 + t5755;
  t6067 = Cos(var1[17]);
  t6059 = Cos(var1[18]);
  t6060 = Sin(var1[17]);
  t6068 = Sin(var1[18]);
  t6076 = Cos(var1[19]);
  t6080 = Sin(var1[19]);
  t6085 = t6067*t6059;
  t6086 = -1.*t6060*t6068;
  t6087 = t6085 + t6086;
  t6061 = -1.*t6059*t6060;
  t6069 = -1.*t6067*t6068;
  t6071 = t6061 + t6069;
  t6094 = Cos(var1[20]);
  t6096 = -1.*t6094;
  t6097 = 1. + t6096;
  t6100 = -1.*t6076*t6087;
  t6101 = -1.*t6071*t6080;
  t6102 = t6100 + t6101;
  t6111 = Sin(var1[20]);
  t6112 = -0.996943*t6111;
  t6105 = t6076*t6071;
  t6106 = -1.*t6087*t6080;
  t6107 = t6105 + t6106;
  t6120 = -0.0004284921280000001*t6097;
  t6109 = 0.0004284921280000001*t6097;
  t6166 = 0.996943*t6111;
  t6240 = -1.*t6059;
  t6264 = 1. + t6240;
  t6081 = -0.70544*t6080;
  t6286 = -1.*t6076;
  t6289 = 1. + t6286;
  t6098 = -0.999969365345*t6097;
  t6099 = 1. + t6098;
  t6294 = -1.*t6067*t6059;
  t6295 = t6060*t6068;
  t6297 = t6294 + t6295;
  t6113 = t6109 + t6112;
  t6359 = t6076*t6297;
  t6360 = t6359 + t6101;
  t6117 = -1.2096424700126054e-9*var1[20];
  t6118 = -0.6934128581485427*t6097;
  t6121 = t6120 + t6112;
  t6123 = -0.021877537552*t6121;
  t6124 = 0.005481192614*t6097;
  t6126 = -0.077936*t6111;
  t6127 = t6124 + t6126;
  t6128 = -0.005534467322*t6127;
  t6129 = t6117 + t6118 + t6123 + t6128;
  t6363 = t6297*t6080;
  t6364 = t6105 + t6363;
  t6133 = -0.07769774964800001*t6097;
  t6134 = -0.005498*t6111;
  t6136 = t6133 + t6134;
  t6146 = -0.005481192614*t6097;
  t6148 = 0.077936*t6111;
  t6149 = t6146 + t6148;
  t6157 = -1.7147089040178687e-8*var1[20];
  t6158 = -0.021744644052735636*t6097;
  t6159 = 0.07769774964800001*t6097;
  t6162 = 0.005498*t6111;
  t6163 = t6159 + t6162;
  t6165 = -0.005534467322*t6163;
  t6169 = t6120 + t6166;
  t6216 = -0.6934341012630001*t6169;
  t6218 = t6157 + t6158 + t6165 + t6216;
  t6220 = -0.993925573253*t6097;
  t6222 = 1. + t6220;
  t6226 = t6109 + t6166;
  t6079 = -0.01841*t6076;
  t6083 = t6079 + t6081;
  t6084 = -1.*t6071*t6083;
  t6088 = -0.70544*t6076;
  t6090 = 0.01841*t6080;
  t6091 = t6088 + t6090;
  t6092 = -1.*t6087*t6091;
  t6103 = t6099*t6102;
  t6114 = t6107*t6113;
  t6115 = t6103 + t6114;
  t6116 = 0.588518*t6115;
  t6131 = -1.*t6102*t6129;
  t6143 = t6107*t6136;
  t6151 = t6102*t6149;
  t6154 = t6143 + t6151;
  t6155 = 0.124503*t6154;
  t6219 = -1.*t6107*t6218;
  t6225 = t6222*t6107;
  t6228 = t6102*t6226;
  t6229 = t6225 + t6228;
  t6230 = -0.045407*t6229;
  t6233 = t6084 + t6092 + t6116 + t6131 + t6155 + t6219 + t6230;
  t6270 = -0.00159*t6264;
  t6271 = -0.27068*t6068;
  t6273 = t6270 + t6271;
  t6279 = -0.27068*t6264;
  t6282 = 0.00159*t6068;
  t6283 = t6279 + t6282;
  t6290 = 0.01841*t6289;
  t6291 = t6290 + t6081;
  t6346 = -0.70544*t6289;
  t6349 = -0.01841*t6080;
  t6353 = t6346 + t6349;
  t6420 = t6059*t6060;
  t6421 = t6067*t6068;
  t6423 = t6420 + t6421;
  t6427 = t6076*t6087;
  t6428 = -1.*t6423*t6080;
  t6429 = t6427 + t6428;
  t6431 = t6076*t6423;
  t6433 = t6087*t6080;
  t6434 = t6431 + t6433;
  t6469 = t6071*t6080;
  t6470 = t6427 + t6469;
  t6491 = -1.*t6076*t6423;
  t6492 = t6491 + t6106;
  t6412 = -1.*t6067;
  t6413 = 1. + t6412;
  t6459 = 0.21*t6060;
  t6461 = -1.*t6067*t6273;
  t6462 = t6060*t6283;
  t6463 = -1.*t6087*t6291;
  t6466 = -1.*t6071*t6353;
  t6467 = t6099*t6107;
  t6471 = t6470*t6113;
  t6473 = t6467 + t6471;
  t6474 = 0.588518*t6473;
  t6475 = -1.*t6107*t6129;
  t6477 = t6470*t6136;
  t6478 = t6107*t6149;
  t6479 = t6477 + t6478;
  t6480 = 0.124503*t6479;
  t6481 = -1.*t6470*t6218;
  t6482 = t6222*t6470;
  t6483 = t6107*t6226;
  t6484 = t6482 + t6483;
  t6486 = -0.045407*t6484;
  t6527 = -1.*t6076*t6071;
  t6528 = -1.*t6297*t6080;
  t6529 = t6527 + t6528;
  t6293 = -1.*t6071*t6291;
  t6356 = -1.*t6297*t6353;
  t6361 = t6099*t6360;
  t6365 = t6364*t6113;
  t6367 = t6361 + t6365;
  t6392 = 0.588518*t6367;
  t6393 = -1.*t6360*t6129;
  t6394 = t6364*t6136;
  t6395 = t6360*t6149;
  t6396 = t6394 + t6395;
  t6398 = 0.124503*t6396;
  t6401 = -1.*t6364*t6218;
  t6402 = t6222*t6364;
  t6404 = t6360*t6226;
  t6405 = t6402 + t6404;
  t6406 = -0.045407*t6405;
  t6234 = 0.21*t6067;
  t6237 = 0.049*t6060;
  t6276 = t6060*t6273;
  t6285 = t6067*t6283;
  t6407 = t6234 + t6237 + t6276 + t6285 + t6293 + t6356 + t6392 + t6393 + t6398 + t6401 + t6406;
  t6559 = 0.00159*t6059;
  t6560 = t6559 + t6271;
  t6561 = t6060*t6560;
  t6562 = -0.27068*t6059;
  t6563 = -0.00159*t6068;
  t6564 = t6562 + t6563;
  t6565 = -1.*t6067*t6564;
  t6566 = t6561 + t6565 + t6293 + t6356 + t6392 + t6393 + t6398 + t6401 + t6406;
  t6415 = 0.21*t6413;
  t6416 = -0.049*t6060;
  t6417 = -1.*t6060*t6273;
  t6419 = -1.*t6067*t6283;
  t6424 = -1.*t6423*t6291;
  t6425 = -1.*t6087*t6353;
  t6430 = t6099*t6429;
  t6437 = t6434*t6113;
  t6438 = t6430 + t6437;
  t6439 = 0.588518*t6438;
  t6440 = -1.*t6429*t6129;
  t6441 = t6434*t6136;
  t6443 = t6429*t6149;
  t6444 = t6441 + t6443;
  t6445 = 0.124503*t6444;
  t6446 = -1.*t6434*t6218;
  t6448 = t6222*t6434;
  t6449 = t6429*t6226;
  t6451 = t6448 + t6449;
  t6452 = -0.045407*t6451;
  t6453 = -0.09 + t6415 + t6416 + t6417 + t6419 + t6424 + t6425 + t6439 + t6440 + t6445 + t6446 + t6452;
  t6458 = -0.049*t6067;
  t6488 = t6458 + t6459 + t6461 + t6462 + t6463 + t6466 + t6474 + t6475 + t6480 + t6481 + t6486;
  t6522 = 0.049*t6413;
  t6523 = -0.049 + t6522 + t6459 + t6461 + t6462 + t6463 + t6466 + t6474 + t6475 + t6480 + t6481 + t6486;
  t6577 = t6431 + t6528;
  t6579 = t6423*t6080;
  t6581 = t6359 + t6579;
  t6575 = -1.*t6297*t6291;
  t6576 = -1.*t6423*t6353;
  t6578 = t6099*t6577;
  t6583 = t6581*t6113;
  t6584 = t6578 + t6583;
  t6587 = 0.588518*t6584;
  t6588 = -1.*t6577*t6129;
  t6589 = t6581*t6136;
  t6590 = t6577*t6149;
  t6593 = t6589 + t6590;
  t6594 = 0.124503*t6593;
  t6595 = -1.*t6581*t6218;
  t6597 = t6222*t6581;
  t6599 = t6577*t6226;
  t6601 = t6597 + t6599;
  t6602 = -0.045407*t6601;
  t6648 = -0.0004284921280000001*t6111;
  t6684 = 0.996943*t6094;
  t6646 = -0.996943*t6094;
  t6704 = 0.0004284921280000001*t6111;
  t6630 = -0.005498*t6094;
  t6631 = -0.07769774964800001*t6111;
  t6632 = t6630 + t6631;
  t6633 = t6470*t6632;
  t6634 = 0.077936*t6094;
  t6636 = -0.005481192614*t6111;
  t6638 = t6634 + t6636;
  t6641 = t6107*t6638;
  t6642 = t6633 + t6641;
  t6644 = 0.124503*t6642;
  t6649 = t6646 + t6648;
  t6652 = -0.021877537552*t6649;
  t6653 = -0.077936*t6094;
  t6654 = 0.005481192614*t6111;
  t6656 = t6653 + t6654;
  t6680 = -0.005534467322*t6656;
  t6681 = -0.6934128581485427*t6111;
  t6682 = -1.2096424700126054e-9 + t6652 + t6680 + t6681;
  t6683 = -1.*t6107*t6682;
  t6688 = t6684 + t6648;
  t6689 = -0.6934341012630001*t6688;
  t6691 = 0.005498*t6094;
  t6693 = 0.07769774964800001*t6111;
  t6696 = t6691 + t6693;
  t6698 = -0.005534467322*t6696;
  t6700 = -0.021744644052735636*t6111;
  t6701 = -1.7147089040178687e-8 + t6689 + t6698 + t6700;
  t6703 = -1.*t6470*t6701;
  t6705 = t6684 + t6704;
  t6708 = t6107*t6705;
  t6709 = -0.993925573253*t6470*t6111;
  t6710 = t6708 + t6709;
  t6711 = -0.045407*t6710;
  t6712 = t6646 + t6704;
  t6713 = t6470*t6712;
  t6715 = -0.999969365345*t6107*t6111;
  t6717 = t6713 + t6715;
  t6718 = 0.588518*t6717;
  t6720 = t6644 + t6683 + t6703 + t6711 + t6718;
  t6455 = 2.*t6233*t6453;
  t6569 = -1.*t6067*t6560;
  t6570 = -1.*t6060*t6564;
  t6571 = t6569 + t6570 + t6463 + t6466 + t6474 + t6475 + t6480 + t6481 + t6486;
  t6489 = -1.*t6087*t6083;
  t6490 = -1.*t6423*t6091;
  t6493 = t6099*t6492;
  t6495 = t6429*t6113;
  t6496 = t6493 + t6495;
  t6497 = 0.588518*t6496;
  t6500 = -1.*t6492*t6129;
  t6504 = t6429*t6136;
  t6505 = t6492*t6149;
  t6508 = t6504 + t6505;
  t6509 = 0.124503*t6508;
  t6510 = -1.*t6429*t6218;
  t6511 = t6222*t6429;
  t6513 = t6492*t6226;
  t6515 = t6511 + t6513;
  t6516 = -0.045407*t6515;
  t6517 = t6489 + t6490 + t6497 + t6500 + t6509 + t6510 + t6516;
  t6525 = -1.*t6297*t6083;
  t6526 = -1.*t6071*t6091;
  t6530 = t6099*t6529;
  t6531 = t6360*t6113;
  t6532 = t6530 + t6531;
  t6534 = 0.588518*t6532;
  t6536 = -1.*t6529*t6129;
  t6538 = t6360*t6136;
  t6539 = t6529*t6149;
  t6540 = t6538 + t6539;
  t6542 = 0.124503*t6540;
  t6544 = -1.*t6360*t6218;
  t6547 = t6222*t6360;
  t6548 = t6529*t6226;
  t6550 = t6547 + t6548;
  t6551 = -0.045407*t6550;
  t6552 = t6525 + t6526 + t6534 + t6536 + t6542 + t6544 + t6551;
  t6554 = 2.*t6523*t6552;
  t6567 = 2.*t6566*t6407;
  t6568 = 2.*t6566*t6453;
  t6572 = 2.*t6571*t6488;
  t6573 = t6067*t6560;
  t6574 = t6060*t6564;
  t6603 = t6573 + t6574 + t6575 + t6576 + t6587 + t6588 + t6594 + t6595 + t6602;
  t6605 = 2.*t6523*t6603;
  t6606 = t6567 + t6568 + t6572 + t6605;
  t6781 = -0.00159*t6059;
  t6783 = 0.27068*t6068;
  t6784 = t6781 + t6783;
  t6722 = 2.*t6453*t6720;
  t6723 = t6434*t6632;
  t6724 = t6429*t6638;
  t6725 = t6723 + t6724;
  t6726 = 0.124503*t6725;
  t6727 = -1.*t6429*t6682;
  t6728 = -1.*t6434*t6701;
  t6729 = t6434*t6712;
  t6730 = -0.999969365345*t6429*t6111;
  t6734 = t6729 + t6730;
  t6739 = 0.588518*t6734;
  t6740 = t6429*t6705;
  t6741 = -0.993925573253*t6434*t6111;
  t6742 = t6740 + t6741;
  t6743 = -0.045407*t6742;
  t6745 = t6726 + t6727 + t6728 + t6739 + t6743;
  t6747 = t6364*t6632;
  t6748 = t6360*t6638;
  t6749 = t6747 + t6748;
  t6750 = 0.124503*t6749;
  t6751 = -1.*t6360*t6682;
  t6753 = -1.*t6364*t6701;
  t6754 = t6364*t6712;
  t6755 = -0.999969365345*t6360*t6111;
  t6757 = t6754 + t6755;
  t6758 = 0.588518*t6757;
  t6759 = t6360*t6705;
  t6760 = -0.993925573253*t6364*t6111;
  t6761 = t6759 + t6760;
  t6762 = -0.045407*t6761;
  t6763 = t6750 + t6751 + t6753 + t6758 + t6762;
  t6764 = 2.*t6523*t6763;
  t6806 = t6100 + t6579;
  t6802 = 0.01841*t6076;
  t6803 = 0.70544*t6080;
  t6804 = t6802 + t6803;
  t6826 = t6527 + t6433;
  t6769 = 2.*t6233*t6566;
  t6770 = 2.*t6571*t6517;
  t6772 = t6769 + t6455 + t6770 + t6554;
  t6410 = 2.*t6233*t6407;
  t6518 = 2.*t6488*t6517;
  t6556 = t6410 + t6455 + t6518 + t6554;
  t6848 = 2.*t6233*t6720;
  t6849 = t6107*t6632;
  t6850 = t6102*t6638;
  t6851 = t6849 + t6850;
  t6852 = 0.124503*t6851;
  t6853 = -1.*t6102*t6682;
  t6854 = -1.*t6107*t6701;
  t6855 = t6107*t6712;
  t6856 = -0.999969365345*t6102*t6111;
  t6857 = t6855 + t6856;
  t6858 = 0.588518*t6857;
  t6859 = t6102*t6705;
  t6860 = -0.993925573253*t6107*t6111;
  t6861 = t6859 + t6860;
  t6863 = -0.045407*t6861;
  t6864 = t6852 + t6853 + t6854 + t6858 + t6863;
  t6865 = 2.*t6523*t6864;
  t6866 = t6429*t6632;
  t6867 = t6492*t6638;
  t6868 = t6866 + t6867;
  t6869 = 0.124503*t6868;
  t6870 = -1.*t6492*t6682;
  t6871 = -1.*t6429*t6701;
  t6872 = t6492*t6705;
  t6873 = -0.993925573253*t6429*t6111;
  t6874 = t6872 + t6873;
  t6875 = -0.045407*t6874;
  t6876 = t6429*t6712;
  t6877 = -0.999969365345*t6492*t6111;
  t6878 = t6876 + t6877;
  t6879 = 0.588518*t6878;
  t6880 = t6869 + t6870 + t6871 + t6875 + t6879;
  t6881 = 2.*t6453*t6880;
  t6882 = 2.*t6517*t6745;
  t6883 = t6848 + t6865 + t6881 + t6882;
  t6894 = -0.0004284921280000001*t6094;
  t6888 = 0.0004284921280000001*t6094;
  t6889 = t6888 + t6112;
  t6893 = -0.021744644052735636*t6094;
  t6895 = t6894 + t6112;
  t6896 = -0.6934341012630001*t6895;
  t6897 = 0.07769774964800001*t6094;
  t6898 = t6897 + t6134;
  t6899 = -0.005534467322*t6898;
  t6900 = t6893 + t6896 + t6899;
  t6902 = -0.005481192614*t6094;
  t6903 = t6902 + t6126;
  t6905 = -0.07769774964800001*t6094;
  t6906 = t6905 + t6162;
  t6910 = -0.6934128581485427*t6094;
  t6911 = 0.005481192614*t6094;
  t6912 = t6911 + t6148;
  t6913 = -0.005534467322*t6912;
  t6914 = t6894 + t6166;
  t6915 = -0.021877537552*t6914;
  t6916 = t6910 + t6913 + t6915;
  t6919 = t6888 + t6166;
  t6795 = 2.*t6566*t6720;
  t6796 = 2.*t6571*t6745;
  t6797 = t6795 + t6722 + t6796 + t6764;
  t6721 = 2.*t6407*t6720;
  t6746 = 2.*t6488*t6745;
  t6765 = t6721 + t6722 + t6746 + t6764;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=(2.*Power(t5197,2) + 2.*t5197*t5267 + 2.*Power(t5311,2) + 2.*t5379*(-0.21*t424 - 1.*t424*t5118 + t5560 + t5567 + t5585 + t5596 + t5597 + t5598 + t5609 + 0.049*t752 + t5111*t752))*var2[9] + t5612*var2[10] + t5504*var2[11] + t5756*var2[12];
  p_output1[19]=0;
  p_output1[20]=t5612*var2[9] + (2.*Power(t5530,2) + 2.*Power(t5549,2) + 2.*t5267*(t5125 + t5143 + t5178 + t5186 + t5188 + t5189 + t5195 + t5523 - 1.*t424*t5775) + 2.*t5379*(t5555 + t5560 + t5567 + t5585 + t5596 + t5597 + t5598 + t5609 - 1.*t5775*t752))*var2[10] + t5763*var2[11] + t5795*var2[12];
  p_output1[21]=0;
  p_output1[22]=t5504*var2[9] + t5763*var2[10] + (2.*Power(t5096,2) + 2.*Power(t5358,2) + 2.*t5267*(t3811 - 1.*t5064*t5320 - 1.*t5219*t5808 - 1.*t4951*t5810 + 0.588518*(t4507*t5320 + t4303*t5810) - 0.124503*(t4595*t5320 + t4575*t5810) - 0.045407*(t5081*t5320 + t5084*t5810)) + 2.*t5379*(-1.*t4389*t5064 + t5404 - 1.*t2190*t5808 - 1.*t4951*t5842 + 0.588518*(t4389*t4507 + t4303*t5842) - 0.124503*(t4389*t4595 + t4575*t5842) - 0.045407*(t4389*t5081 + t5084*t5842)))*var2[11] + t5922*var2[12];
  p_output1[23]=0;
  p_output1[24]=t5756*var2[9] + t5795*var2[10] + t5922*var2[11] + (2.*Power(2.1934241414728571e-7 + 0.0007262134395594695*t4503 + 0.588518*(t5643 + t5659) + 0.6934341012630001*(t5642 + t5660) - 0.045407*(t5647 + t5674) + 0.021877537552*(t5646 + t5676),2) + 2.*Power(t5705,2) + 2.*Power(t5732,2) + 2.*t5267*(-0.045407*(-0.993925573253*t3840*t5236 + t5227*t5932) - 1.*t5236*t5950 - 0.124503*(t5236*t5953 + t5227*t5957) - 1.*t5227*t5969 + 0.588518*(-0.999969365345*t3840*t5227 + t5236*t5976)) + 2.*t5379*(-0.045407*(-0.993925573253*t3840*t5284 + t4480*t5932) - 1.*t5284*t5950 - 0.124503*(t5284*t5953 + t4480*t5957) - 1.*t4480*t5969 + 0.588518*(-0.999969365345*t3840*t4480 + t5284*t5976)) + 2.*(0.0007262134395594695*t3840 + 0.021877537552*(t5017 + t5947) - 0.045407*(t4591 + t5952) + 0.588518*(t4568 + t5956) + 0.6934341012630001*(t4926 + t5962))*(0.09 - 0.124503*(1. - 0.006104248100000001*t4234) - 0.000033783761634830594*t4234 + 0.6934341012630001*(t4568 + t4918) + 0.588518*(t4553 + t4926) + 0.021877537552*(t4591 + t4996) - 0.045407*(t4589 + t5017) + 2.1934241414728571e-7*var1[12]))*var2[12];
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=(2.*Power(t6407,2) + 2.*t6407*t6453 + 2.*Power(t6488,2) + 2.*t6523*(-0.21*t6060 + 0.049*t6067 + t6067*t6273 - 1.*t6060*t6283 + t6575 + t6576 + t6587 + t6588 + t6594 + t6595 + t6602))*var2[17] + t6606*var2[18] + t6556*var2[19] + t6765*var2[20];
  p_output1[36]=0;
  p_output1[37]=t6606*var2[17] + (2.*Power(t6566,2) + 2.*Power(t6571,2) + 2.*t6453*(t6293 + t6356 + t6392 + t6393 + t6398 + t6401 + t6406 + t6565 - 1.*t6060*t6784) + 2.*t6523*(t6574 + t6575 + t6576 + t6587 + t6588 + t6594 + t6595 + t6602 - 1.*t6067*t6784))*var2[18] + t6772*var2[19] + t6797*var2[20];
  p_output1[38]=0;
  p_output1[39]=t6556*var2[17] + t6772*var2[18] + (2.*Power(t6233,2) + 2.*Power(t6517,2) + 2.*t6453*(t6092 - 1.*t6218*t6492 - 1.*t6423*t6804 - 1.*t6129*t6806 + 0.588518*(t6113*t6492 + t6099*t6806) + 0.124503*(t6136*t6492 + t6149*t6806) - 0.045407*(t6222*t6492 + t6226*t6806)) + 2.*t6523*(-1.*t6102*t6218 + t6526 - 1.*t6087*t6804 - 1.*t6129*t6826 + 0.588518*(t6102*t6113 + t6099*t6826) + 0.124503*(t6102*t6136 + t6149*t6826) - 0.045407*(t6102*t6222 + t6226*t6826)))*var2[19] + t6883*var2[20];
  p_output1[40]=0;
  p_output1[41]=t6765*var2[17] + t6797*var2[18] + t6883*var2[19] + (2.*Power(-2.1934241414728571e-7 - 0.0007262134395594695*t6111 + 0.588518*(t6636 + t6653) + 0.6934341012630001*(t6634 + t6654) - 0.045407*(t6631 + t6691) + 0.021877537552*(t6630 + t6693),2) + 2.*Power(t6720,2) + 2.*Power(t6745,2) + 2.*t6453*(-0.045407*(-0.993925573253*t6094*t6434 + t6429*t6889) - 1.*t6434*t6900 + 0.124503*(t6429*t6903 + t6434*t6906) - 1.*t6429*t6916 + 0.588518*(-0.999969365345*t6094*t6429 + t6434*t6919)) + 2.*t6523*(-0.045407*(-0.993925573253*t6094*t6470 + t6107*t6889) - 1.*t6470*t6900 + 0.124503*(t6107*t6903 + t6470*t6906) - 1.*t6107*t6916 + 0.588518*(-0.999969365345*t6094*t6107 + t6470*t6919)) + 2.*(-0.0007262134395594695*t6094 + 0.021877537552*(t6162 + t6897) + 0.588518*(t6148 + t6902) - 0.045407*(t6134 + t6905) + 0.6934341012630001*(t6126 + t6911))*(-0.09 + 0.124503*(1. - 0.006104248100000001*t6097) + 0.000033783761634830594*t6097 + 0.588518*(t6126 + t6146) + 0.6934341012630001*(t6124 + t6148) + 0.021877537552*(t6134 + t6159) - 0.045407*(t6133 + t6162) - 2.1934241414728571e-7*var1[20]))*var2[20];
  p_output1[42]=0;
  p_output1[43]=0;
}

namespace SymFunction
{

void Jdot_achilles_constraint_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




